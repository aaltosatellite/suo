#include <iostream>
#include <cmath>
#include <ctime>

#include <cppunit/TestFixture.h>
#include <cppunit/TestAssert.h>
#include <cppunit/TestCaller.h>
#include <cppunit/ui/text/TestRunner.h>

#include "suo.hpp"
#include "coding/reed_solomon.hpp"


using namespace std;
using namespace suo;


class ReedSolomonTest : public CppUnit::TestFixture
{
private:

public:

	void setUp() {

	}


	void runTest()
	{

		CPPUNIT_ASSERT(&RSCodes::getConfig("CCSDS RS(255,223)") == &RSCodes::CCSDS_RS_255_223);
		cout << endl;

		ReedSolomon rs(RSCodes::CCSDS_RS_255_223);
		{
			ByteVector data = { 0x73, 0x0a, 0xcc, 0xb0, 0x3a, 0xbe, 0x4d, 0x19 };
			ByteVector correct = { 0x73, 0x0a, 0xcc, 0xb0, 0x3a, 0xbe, 0x4d, 0x19, 0x9d, 0x44, 0xa2, 0x9f, 0x73, 0xae, 0x42, 0xbe, 0xc2, 0x21, 0x6, 0x61, 0xfd, 0x92, 0x71, 0x2, 0x8, 0x1d, 0x4e, 0x56, 0xfa, 0xa3, 0x7b, 0xbf, 0xd, 0xde, 0xe, 0x5a, 0x5b, 0x73, 0xc4, 0x60 };
			rs.encode(data);
			cout << "data: " << data << endl;
			cout << "corr: " << correct << endl;
			CPPUNIT_ASSERT(data == correct);
		}

		{
			ByteVector data = { 0x8d, 0x23, 0xcc, 0xc6, 0x44, 0x5, 0x92, 0x8b, 0xca, 0x1d, 0x6f, 0x68, 0xdf, 0xa2, 0x31, 0x8c, 0x82, 0x1e, 0x2e, 0x8d, 0xbd, 0x19, 0x66, 0xaa, 0x34, 0xa, 0x5c, 0x99, 0x6c, 0xa9, 0xce, 0x6, 0xd0, 0x9c, 0xa, 0x79, 0x3, 0x29, 0xa5, 0x28, 0x4c, 0x2e, 0x9b, 0x7d, 0x76, 0xb, 0x36, 0xee, 0xd9, 0xe0, 0x8, 0x31, 0xbf, 0x9b, 0xc7, 0xe4, 0x13, 0x22, 0x58, 0x3a, 0xc5, 0x68, 0x4a, 0xf5, 0xd5, 0xae, 0xd7, 0x88, 0x56, 0xe9, 0x2f, 0xcf, 0x29, 0x66, 0x63, 0xcc, 0xf2, 0x31, 0xa, 0x5, 0x2b, 0xea, 0xdf, 0x3a, 0x9b, 0xe9, 0xd6, 0xbf, 0x99, 0x73 };
			ByteVector correct = { 0x8d, 0x23, 0xcc, 0xc6, 0x44, 0x5, 0x92, 0x8b, 0xca, 0x1d, 0x6f, 0x68, 0xdf, 0xa2, 0x31, 0x8c, 0x82, 0x1e, 0x2e, 0x8d, 0xbd, 0x19, 0x66, 0xaa, 0x34, 0xa, 0x5c, 0x99, 0x6c, 0xa9, 0xce, 0x6, 0xd0, 0x9c, 0xa, 0x79, 0x3, 0x29, 0xa5, 0x28, 0x4c, 0x2e, 0x9b, 0x7d, 0x76, 0xb, 0x36, 0xee, 0xd9, 0xe0, 0x8, 0x31, 0xbf, 0x9b, 0xc7, 0xe4, 0x13, 0x22, 0x58, 0x3a, 0xc5, 0x68, 0x4a, 0xf5, 0xd5, 0xae, 0xd7, 0x88, 0x56, 0xe9, 0x2f, 0xcf, 0x29, 0x66, 0x63, 0xcc, 0xf2, 0x31, 0xa, 0x5, 0x2b, 0xea, 0xdf, 0x3a, 0x9b, 0xe9, 0xd6, 0xbf, 0x99, 0x73, 0x63, 0x74, 0xa4, 0x9d, 0x48, 0x8f, 0xd6, 0x47, 0xe7, 0xd1, 0xb5, 0xa3, 0xcb, 0x4a, 0xcf, 0x80, 0x47, 0x7, 0x15, 0x90, 0x40, 0x9c, 0xf7, 0x8d, 0x30, 0x92, 0xb8, 0xbf, 0xb0, 0xb6, 0x5e, 0x3e };
			rs.encode(data);
			CPPUNIT_ASSERT(data == correct);
		}

		{
			ByteVector data = { 0x54, 0x3f, 0xf5, 0xc9, 0xfa, 0xa3, 0x3b, 0xe0, 0xc8, 0x7b, 0x5c, 0x7b, 0x19, 0xa0, 0xe7, 0xd6, 0x71, 0x4c, 0x2, 0xfd, 0x5c, 0x6, 0x9e, 0x87, 0xfe, 0x36, 0xb6, 0x4, 0xe1, 0x1b, 0x6b, 0x52, 0xec, 0x29, 0x3d, 0x14, 0x5a, 0xdb, 0x9b, 0x57, 0x5e, 0xb7, 0x15, 0xd6, 0x5d, 0x61, 0x81, 0x4f, 0xfc, 0x17, 0x64, 0xc6, 0x7e, 0x73, 0x77, 0x2f, 0xed, 0xd8, 0x46, 0xbb, 0x9c, 0x88, 0x88, 0xa1, 0xe6, 0x5a, 0xc1, 0x3, 0x94, 0xfd, 0x2e, 0x7b, 0x73, 0x9, 0x37, 0xd8, 0x88, 0xaa, 0x74, 0x58, 0x11, 0xb0, 0x43, 0x6e, 0x6, 0x78, 0xb6, 0xaf, 0x27, 0x55, 0x1b, 0x22, 0x79, 0x5f, 0x9b, 0x17, 0x83, 0x17, 0x92, 0x23, 0x13, 0xef, 0xe3, 0xf1, 0x26, 0x5c, 0xc3, 0xb3, 0xb9, 0x6d, 0x6b, 0xb6, 0x52, 0x21, 0x80, 0x70, 0x97, 0xe1, 0xa0, 0x21, 0x2d, 0x5, 0x20, 0x3e, 0x23, 0x7b, 0x40, 0x47, 0xa9, 0xff, 0xed, 0x5f, 0xe8, 0xd0, 0x8, 0x6d, 0x63, 0x62, 0xdc, 0x75, 0xb1, 0x1f, 0x97, 0xb4, 0x58, 0xff, 0xbb, 0x6e, 0x73, 0x58, 0x87, 0xd0, 0xab, 0xf9, 0xb4, 0x23, 0xd, 0x8, 0x78, 0xbc, 0x8f, 0x6, 0x4b, 0x73, 0x92, 0x64, 0x54, 0xe8, 0x8e, 0x41, 0x4b, 0xf7, 0x91, 0xc8, 0x2f, 0xd6, 0x81, 0xa2, 0x73, 0xd9, 0x50, 0x51, 0x43, 0xb, 0x18, 0x88, 0x19, 0x21, 0xab, 0x33, 0x94, 0xf3, 0x3d, 0xf6, 0xbe, 0x6d, 0x32, 0xa6, 0x2b, 0xdc, 0xff, 0x95, 0x3a, 0xf6, 0xac, 0x76, 0x19, 0xb9, 0x42, 0xaa, 0x39, 0x98, 0x55, 0x7, 0xba, 0x1a, 0x6e, 0x81, 0xd3, 0x4e, 0xe2, 0xef, 0x99 };
			ByteVector correct = { 0x54, 0x3f, 0xf5, 0xc9, 0xfa, 0xa3, 0x3b, 0xe0, 0xc8, 0x7b, 0x5c, 0x7b, 0x19, 0xa0, 0xe7, 0xd6, 0x71, 0x4c, 0x2, 0xfd, 0x5c, 0x6, 0x9e, 0x87, 0xfe, 0x36, 0xb6, 0x4, 0xe1, 0x1b, 0x6b, 0x52, 0xec, 0x29, 0x3d, 0x14, 0x5a, 0xdb, 0x9b, 0x57, 0x5e, 0xb7, 0x15, 0xd6, 0x5d, 0x61, 0x81, 0x4f, 0xfc, 0x17, 0x64, 0xc6, 0x7e, 0x73, 0x77, 0x2f, 0xed, 0xd8, 0x46, 0xbb, 0x9c, 0x88, 0x88, 0xa1, 0xe6, 0x5a, 0xc1, 0x3, 0x94, 0xfd, 0x2e, 0x7b, 0x73, 0x9, 0x37, 0xd8, 0x88, 0xaa, 0x74, 0x58, 0x11, 0xb0, 0x43, 0x6e, 0x6, 0x78, 0xb6, 0xaf, 0x27, 0x55, 0x1b, 0x22, 0x79, 0x5f, 0x9b, 0x17, 0x83, 0x17, 0x92, 0x23, 0x13, 0xef, 0xe3, 0xf1, 0x26, 0x5c, 0xc3, 0xb3, 0xb9, 0x6d, 0x6b, 0xb6, 0x52, 0x21, 0x80, 0x70, 0x97, 0xe1, 0xa0, 0x21, 0x2d, 0x5, 0x20, 0x3e, 0x23, 0x7b, 0x40, 0x47, 0xa9, 0xff, 0xed, 0x5f, 0xe8, 0xd0, 0x8, 0x6d, 0x63, 0x62, 0xdc, 0x75, 0xb1, 0x1f, 0x97, 0xb4, 0x58, 0xff, 0xbb, 0x6e, 0x73, 0x58, 0x87, 0xd0, 0xab, 0xf9, 0xb4, 0x23, 0xd, 0x8, 0x78, 0xbc, 0x8f, 0x6, 0x4b, 0x73, 0x92, 0x64, 0x54, 0xe8, 0x8e, 0x41, 0x4b, 0xf7, 0x91, 0xc8, 0x2f, 0xd6, 0x81, 0xa2, 0x73, 0xd9, 0x50, 0x51, 0x43, 0xb, 0x18, 0x88, 0x19, 0x21, 0xab, 0x33, 0x94, 0xf3, 0x3d, 0xf6, 0xbe, 0x6d, 0x32, 0xa6, 0x2b, 0xdc, 0xff, 0x95, 0x3a, 0xf6, 0xac, 0x76, 0x19, 0xb9, 0x42, 0xaa, 0x39, 0x98, 0x55, 0x7, 0xba, 0x1a, 0x6e, 0x81, 0xd3, 0x4e, 0xe2, 0xef, 0x99, 0x98, 0xff, 0xc4, 0x4f, 0x46, 0xae, 0x73, 0x90, 0x5a, 0x76, 0xfc, 0x89, 0x2c, 0xfe, 0xa7, 0x47, 0xa, 0xb7, 0xbf, 0x37, 0x89, 0x97, 0x2a, 0x85, 0xe4, 0xc4, 0xdf, 0x48, 0x3f, 0x7e, 0x5c, 0x46 };
			rs.encode(data);
			CPPUNIT_ASSERT(data == correct);
		}


		/* Decoding stuff */
		try {
			// There are no errors!
			ByteVector encoded = { 0x73, 0x0a, 0xcc, 0xb0, 0x3a, 0xbe, 0x4d, 0x19, 0x9d, 0x44, 0xa2, 0x9f, 0x73, 0xae, 0x42, 0xbe, 0xc2, 0x21, 0x6, 0x61, 0xfd, 0x92, 0x71, 0x2, 0x8, 0x1d, 0x4e, 0x56, 0xfa, 0xa3, 0x7b, 0xbf, 0xd, 0xde, 0xe, 0x5a, 0x5b, 0x73, 0xc4, 0x60 };
			ByteVector decoded = { 0x73, 0x0a, 0xcc, 0xb0, 0x3a, 0xbe, 0x4d, 0x19 };
			int corrected = rs.decode(encoded);
			
			cout << "corrected: " << corrected << endl;
			cout << "encoded: " << encoded << endl;
			cout << "decoded: " << decoded << endl;

			CPPUNIT_ASSERT(corrected == 0);
			CPPUNIT_ASSERT(encoded == decoded);
		}
		catch (const ReedSolomonUncorrectable& e) {
			CPPUNIT_FAIL("ReedSolomonUnccorectable");
		}

		try {
			// Single symbol error
			ByteVector encoded = { 0x73, 0x0a, 0xdd, 0xb0, 0x3a, 0xbe, 0x4d, 0x19, 0x9d, 0x44, 0xa2, 0x9f, 0x73, 0xae, 0x42, 0xbe, 0xc2, 0x21, 0x6, 0x61, 0xfd, 0x92, 0x71, 0x2, 0x8, 0x1d, 0x4e, 0x56, 0xfa, 0xa3, 0x7b, 0xbf, 0xd, 0xde, 0xe, 0x5a, 0x5b, 0x73, 0xc4, 0x60 };
			ByteVector decoded = { 0x73, 0x0a, 0xcc, 0xb0, 0x3a, 0xbe, 0x4d, 0x19 };
			int corrected = rs.decode(encoded);

			cout << "corrected: " << corrected << endl;
			cout << "encoded: " << encoded << endl;
			cout << "decoded: " << decoded << endl;

			CPPUNIT_ASSERT(corrected == 1);
			CPPUNIT_ASSERT(encoded == decoded);
		}
		catch (const ReedSolomonUncorrectable& e) {
			CPPUNIT_FAIL("ReedSolomonUnccorectable");
		}

	}



	static CppUnit::Test* suite()
	{
		CppUnit::TestSuite* suite = new CppUnit::TestSuite("ReedSolomonTest");
		suite->addTest(new CppUnit::TestCaller<ReedSolomonTest>("ReedSolomonTest", &ReedSolomonTest::runTest));
		return suite;
	}



};


#ifndef COMBINED_TEST
int main(int argc, char** argv)
{
	CppUnit::TextUi::TestRunner runner;
	runner.addTest(ReedSolomonTest::suite());
	runner.run();
	return 0;
}
#endif
